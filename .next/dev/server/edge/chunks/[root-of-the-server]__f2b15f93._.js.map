{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\nimport { withAuth } from 'next-auth/middleware'\nimport { UserRole } from '@prisma/client'\n\nexport default withAuth(\n  function middleware(req) {\n    const { pathname } = req.nextUrl\n    const session = req.nextauth.token\n\n    // Public routes\n    const publicRoutes = ['/', '/login', '/register', '/register-vendor', '/products']\n    const isPublicRoute = publicRoutes.some(route => pathname === route || pathname.startsWith(`${route}/`))\n\n    if (isPublicRoute) {\n      return NextResponse.next()\n    }\n\n    // API routes\n    if (pathname.startsWith('/api/auth')) {\n      return NextResponse.next()\n    }\n\n    // Protected routes\n    if (!session) {\n      return NextResponse.redirect(new URL('/login', req.url))\n    }\n\n    // Admin routes\n    if (pathname.startsWith('/admin')) {\n      if (session.role !== 'ADMIN') {\n        return NextResponse.redirect(new URL('/unauthorized', req.url))\n      }\n    }\n\n    // Vendor routes\n    if (pathname.startsWith('/vendor')) {\n      if (session.role !== 'VENDOR' && session.role !== 'ADMIN') {\n        return NextResponse.redirect(new URL('/unauthorized', req.url))\n      }\n    }\n\n    return NextResponse.next()\n  },\n  {\n    callbacks: {\n      authorized: ({ token, req }) => {\n        const { pathname } = req.nextUrl\n        \n        // Public routes\n        const publicRoutes = ['/', '/login', '/register', '/register-vendor', '/products']\n        const isPublicRoute = publicRoutes.some(route => pathname === route || pathname.startsWith(`${route}/`))\n        \n        if (isPublicRoute || pathname.startsWith('/api/auth')) {\n          return true\n        }\n        \n        return !!token\n      },\n    },\n  }\n)\n\nexport const config = {\n  matcher: ['/((?!_next/static|_next/image|favicon.ico|.*\\\\.mp4|.*\\\\.jpg|.*\\\\.png|.*\\\\.svg|.*\\\\.webp|.*\\\\.gif|.*\\\\.ico|.*\\\\.woff|.*\\\\.woff2|.*\\\\.ttf|.*\\\\.eot).*)']\n}\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAEA;;;uCAGe,IAAA,8JAAQ,EACrB,SAAS,WAAW,GAAG;IACrB,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,OAAO;IAChC,MAAM,UAAU,IAAI,QAAQ,CAAC,KAAK;IAElC,gBAAgB;IAChB,MAAM,eAAe;QAAC;QAAK;QAAU;QAAa;QAAoB;KAAY;IAClF,MAAM,gBAAgB,aAAa,IAAI,CAAC,CAAA,QAAS,aAAa,SAAS,SAAS,UAAU,CAAC,GAAG,MAAM,CAAC,CAAC;IAEtG,IAAI,eAAe;QACjB,OAAO,gMAAY,CAAC,IAAI;IAC1B;IAEA,aAAa;IACb,IAAI,SAAS,UAAU,CAAC,cAAc;QACpC,OAAO,gMAAY,CAAC,IAAI;IAC1B;IAEA,mBAAmB;IACnB,IAAI,CAAC,SAAS;QACZ,OAAO,gMAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,IAAI,GAAG;IACxD;IAEA,eAAe;IACf,IAAI,SAAS,UAAU,CAAC,WAAW;QACjC,IAAI,QAAQ,IAAI,KAAK,SAAS;YAC5B,OAAO,gMAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,iBAAiB,IAAI,GAAG;QAC/D;IACF;IAEA,gBAAgB;IAChB,IAAI,SAAS,UAAU,CAAC,YAAY;QAClC,IAAI,QAAQ,IAAI,KAAK,YAAY,QAAQ,IAAI,KAAK,SAAS;YACzD,OAAO,gMAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,iBAAiB,IAAI,GAAG;QAC/D;IACF;IAEA,OAAO,gMAAY,CAAC,IAAI;AAC1B,GACA;IACE,WAAW;QACT,YAAY,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE;YACzB,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,OAAO;YAEhC,gBAAgB;YAChB,MAAM,eAAe;gBAAC;gBAAK;gBAAU;gBAAa;gBAAoB;aAAY;YAClF,MAAM,gBAAgB,aAAa,IAAI,CAAC,CAAA,QAAS,aAAa,SAAS,SAAS,UAAU,CAAC,GAAG,MAAM,CAAC,CAAC;YAEtG,IAAI,iBAAiB,SAAS,UAAU,CAAC,cAAc;gBACrD,OAAO;YACT;YAEA,OAAO,CAAC,CAAC;QACX;IACF;AACF;AAGK,MAAM,SAAS;IACpB,SAAS;QAAC;KAAuJ;AACnK"}}]
}