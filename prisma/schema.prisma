generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id            String    @id @default(cuid())
    email         String    @unique
    password      String?
    name          String?
    role          UserRole  @default(CUSTOMER)
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    addresses     Address[]
    orders        Order[]
    reviews       Review[]
    sessions      Session[]
    vendor        Vendor?

    @@map("users")
}

model Vendor {
    id              String       @id @default(cuid())
    userId          String       @unique
    businessName    String
    businessEmail   String
    businessPhone   String?
    taxId           String?
    description     String?
    logo            String?
    status          VendorStatus @default(PENDING)
    stripeAccountId String?      @unique
    commissionRate  Float        @default(0.15)
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    approvedAt      DateTime?
    orders          Order[]
    payouts         Payout[]
    products        Product[]
    user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    warehouses      Warehouse[]

    @@map("vendors")
}

model Warehouse {
    id                String   @id @default(cuid())
    vendorId          String
    name              String
    country           String
    street            String
    city              String
    zipCode           String
    apartment         String?
    contactName       String
    email             String
    phone             String
    address           String?
    state             String?
    postalCode        String?
    isActive          Boolean? @default(true)
    cifPrice          Float?
    cifCurrency       String?  @default("EUR")
    exwPrice          Float?
    exwCurrency       String?  @default("EUR")
    fcaPrice          Float?
    fcaCurrency       String?  @default("EUR")
    deliveryCountries String[] @default([])
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    vendor            Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

    @@map("warehouses")
}

model Product {
    id                String        @id @default(cuid())
    vendorId          String
    sku               String        @unique
    name              String
    slug              String        @unique
    description       String
    shortDescription  String?
    price             Float
    compareAtPrice    Float?
    costPerItem       Float?
    stock             Int           @default(0)
    lowStockThreshold Int           @default(10)
    status            ProductStatus @default(DRAFT)
    wattage           Int?
    voltage           Int?
    panelType         String?
    efficiency        Float?
    warranty          Int?
    dimensions        String?
    weight            Float?
    certification     String[]
    images            String[]
    thumbnail         String?
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
    publishedAt       DateTime?
    orderItems        OrderItem[]
    vendor            Vendor        @relation(fields: [vendorId], references: [id], onDelete: Cascade)
    reviews           Review[]
    categories        Category[]    @relation("CategoryToProduct")

    @@map("products")
}

model Category {
    id          String     @id @default(cuid())
    name        String     @unique
    slug        String     @unique
    description String?
    image       String?
    parentId    String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
    children    Category[] @relation("CategoryToCategory")
    products    Product[]  @relation("CategoryToProduct")

    @@map("categories")
}

model Order {
    id                String      @id @default(cuid())
    orderNumber       String      @unique
    customerId        String
    vendorId          String?
    subtotal          Float
    tax               Float       @default(0)
    shippingCost      Float       @default(0)
    discount          Float       @default(0)
    total             Float
    commissionAmount  Float       @default(0)
    vendorPayout      Float       @default(0)
    status            OrderStatus @default(PENDING)
    paymentIntentId   String?     @unique
    paymentStatus     String?
    shippingAddressId String
    billingAddressId  String
    trackingNumber    String?
    carrier           String?
    shippedAt         DateTime?
    deliveredAt       DateTime?
    notes             String?
    createdAt         DateTime    @default(now())
    updatedAt         DateTime    @updatedAt
    items             OrderItem[]
    billingAddress    Address     @relation("BillingAddress", fields: [billingAddressId], references: [id])
    customer          User        @relation(fields: [customerId], references: [id])
    shippingAddress   Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
    vendor            Vendor?     @relation(fields: [vendorId], references: [id])

    @@map("orders")
}

model OrderItem {
    id        String   @id @default(cuid())
    orderId   String
    productId String
    quantity  Int
    price     Float
    createdAt DateTime @default(now())
    order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product   Product  @relation(fields: [productId], references: [id])

    @@map("order_items")
}

model Address {
    id             String   @id @default(cuid())
    userId         String
    fullName       String
    company        String?
    phone          String
    line1          String
    line2          String?
    city           String
    state          String
    postalCode     String
    country        String   @default("US")
    isDefault      Boolean  @default(false)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    billingOrders  Order[]  @relation("BillingAddress")
    shippingOrders Order[]  @relation("ShippingAddress")

    @@map("addresses")
}

model Review {
    id        String   @id @default(cuid())
    productId String
    userId    String
    rating    Int
    title     String?
    comment   String
    verified  Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([productId, userId])
    @@map("reviews")
}

model Payout {
    id               String    @id @default(cuid())
    vendorId         String
    amount           Float
    currency         String    @default("usd")
    stripeTransferId String?
    status           String
    periodStart      DateTime
    periodEnd        DateTime
    createdAt        DateTime  @default(now())
    paidAt           DateTime?
    vendor           Vendor    @relation(fields: [vendorId], references: [id])

    @@map("payouts")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

enum UserRole {
    CUSTOMER
    VENDOR
    ADMIN
}

enum VendorStatus {
    PENDING
    APPROVED
    SUSPENDED
    REJECTED
}

enum ProductStatus {
    DRAFT
    PENDING
    ACTIVE
    REJECTED
    OUT_OF_STOCK
}

enum OrderStatus {
    PENDING
    PAID
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
    REFUNDED
}

enum PickupOption {
    CIF
    EXW
    FCA
}
